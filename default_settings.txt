Scenario.name = my_scenario
Scenario.simulateConnections = true
Scenario.updateInterval=1
Scenario.endTime=300

WiFi80211.type=SimpleBroadcastInterface
WiFi80211.transmitSpeed=1k
WiFi80211.transmitRange=150

Scenario.nrofHostGroups = 4
Group.bufferSize = 50M
Group.router = EpidemicRouter
Group.waitTime = 0,0
Group.speed=2, 4
Group.nrofInterfaces=1
Group.interface1=WiFi80211

Group1.groupID=a_
Group1.nrofHosts = 1
Group1.movementModel=StationaryMovement
Group1.nodeLocation = 300,300

# Group1.nodeLocation = POINT (356.0413935507689 317.175863384662)
# Y =  (700-317) = 383
Group2.groupID=b_
Group2.nrofHosts=1
Group2.nodeLocation=300,400
Group2.movementModel=StationaryMovement

Group3.groupID=c_
Group3.nrofHosts=1
Group3.nodeLocation=400,300
Group3.movementModel=StationaryMovement

Group4.groupID=d_
Group4.nrofHosts=1
Group4.nodeLocation=400,400
Group4.movementModel=StationaryMovement


## Message creation parameters
# How many event generators
Events.nrof = 2
# Class of the first event generator
Events1.class = MessageEventGenerator
# (following settings are specific for the MessageEventGenerator class)
# Creation interval in seconds (one new message every 25 to 35 seconds)
Events1.interval = 100,101
# Message sizes (500kB - 1MB)
Events1.size = 74k,75k
# range of message source/destination addresses
Events1.hosts = 0,1
Events1.tohosts=1,2
# Message ID prefix
Events1.prefix = M

Events2.class = MessageEventGenerator
# (following settings are specific for the MessageEventGenerator class)
# Creation interval in seconds (one new message every 25 to 35 seconds)
Events2.interval = 100,101
# Message sizes (500kB - 1MB)
Events2.size = 74k,75k
# range of message source/destination addresses
Events2.hosts = 2,3
Events2.tohosts=3,4
# Message ID prefix
Events2.prefix = N


# World's size for Movement Models without implicit size (width, height; meters)
MovementModel.worldSize = 1000, 1000
# How long time to move hosts in the world before real simulation
MovementModel.warmup = 1000


## Reports - all report names have to be valid report classes

# how many reports to load
Report.nrofReports = 1
# length of the warm up period (simulated seconds)
Report.warmup = 0
# default directory of reports (can be overridden per Report with output setting)
Report.reportDir = reports/
# Report classes to load
Report.report1 = MessageStatsReport

## Default settings for some routers settings
ProphetRouter.secondsInTimeUnit = 30
SprayAndWaitRouter.nrofCopies = 6
SprayAndWaitRouter.binaryMode = true

## Optimization settings -- these affect the speed of the simulation
## see World class for details.
Optimization.cellSizeMult = 5
Optimization.randomizeUpdateOrder = true


## GUI settings

# GUI underlay image settings
GUI.UnderlayImage.fileName = data/helsinki_underlay.png
# Image offset in pixels (x, y)
GUI.UnderlayImage.offset = 64, 20
# Scaling factor for the image
GUI.UnderlayImage.scale = 4.75
# Image rotation (radians)
GUI.UnderlayImage.rotate = -0.015

# how many events to show in the log panel (default = 30)
GUI.EventLogPanel.nrofEvents = 100
# Regular Expression log filter (see Pattern-class from the Java API for RE-matching details)
#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$

Report.reportDir = relatorios/
Report.nrofReports = 1
Report.report1 = EventLogReport

